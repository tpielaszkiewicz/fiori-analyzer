[{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YBOPF_DEMO/Component.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YCDS_BOPF_DEMO1/Component.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YCDS_DEMO_1/Component.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/Component.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":54,"column":48,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":54,"endColumn":57},{"ruleId":"sap-no-proprietary-browser-api","message":"Definition for rule 'sap-no-proprietary-browser-api' was not found.","line":56,"column":17,"endLine":56,"endColumn":75,"severity":2,"nodeType":null},{"ruleId":"no-inline-comments","severity":1,"message":"Unexpected comment inline with code.","line":59,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":59,"endColumn":102}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/core/UIComponent\",\n    \"sap/ui/Device\",\n    \"./model/models\",\n    \"./controller/ErrorHandler\"\n], function (UIComponent, Device, models, ErrorHandler) {\n    \"use strict\";\n\n    return UIComponent.extend(\"yplants.Component\", {\n\n        metadata : {\n            manifest: \"json\"\n        },\n\n        /**\n         * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n         * In this function, the device models are set and the router is initialized.\n         * @public\n         * @override\n         */\n        init : function () {\n            // call the base component's init function\n            UIComponent.prototype.init.apply(this, arguments);\n\n            // initialize the error handler with the component\n            this._oErrorHandler = new ErrorHandler(this);\n\n            // set the device model\n            this.setModel(models.createDeviceModel(), \"device\");\n\n            // create the views based on the url/hash\n            this.getRouter().initialize();\n        },\n\n        /**\n         * The component is destroyed by UI5 automatically.\n         * In this method, the ErrorHandler is destroyed.\n         * @public\n         * @override\n         */\n        destroy : function () {\n            this._oErrorHandler.destroy();\n            // call the base component's destroy function\n            UIComponent.prototype.destroy.apply(this, arguments);\n        },\n\n        /**\n         * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n         * design mode class should be set, which influences the size appearance of some controls.\n         * @public\n         * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n         */\n        getContentDensityClass : function() {\n            if (this._sContentDensityClass === undefined) {\n                // check whether FLP has already set the content density class; do nothing in this case\n                // eslint-disable-next-line sap-no-proprietary-browser-api\n                if (document.body.classList.contains(\"sapUiSizeCozy\") || document.body.classList.contains(\"sapUiSizeCompact\")) {\n                    this._sContentDensityClass = \"\";\n                } else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n                    this._sContentDensityClass = \"sapUiSizeCompact\";\n                } else {\n                    // \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n                    this._sContentDensityClass = \"sapUiSizeCozy\";\n                }\n            }\n            return this._sContentDensityClass;\n        }\n\n    });\n\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_App.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_BaseController.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_ErrorHandler.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":28,"column":69,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":28,"endColumn":78}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/base/Object\",\n    \"sap/m/MessageBox\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (UI5Object, MessageBox, Filter, FilterOperator) {\n    \"use strict\";\n\n    return UI5Object.extend(\"yplants.controller.ErrorHandler\", {\n\n        /**\n         * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n         * @class\n         * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n         * @public\n         * @alias yplants.controller.ErrorHandler\n         */\n        constructor : function (oComponent) {\n            var oMessageManager = sap.ui.getCore().getMessageManager(),\n                oMessageModel = oMessageManager.getMessageModel(),\n                oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle(),\n                sErrorText = oResourceBundle.getText(\"errorText\"),\n                sMultipleErrors = oResourceBundle.getText(\"multipleErrorsText\");\n\n            this._oComponent = oComponent;\n            this._bMessageOpen = false;\n\n            this.oMessageModelBinding = oMessageModel.bindList(\"/\", undefined,\n                [], new Filter(\"technical\", FilterOperator.EQ, true));\n\n            this.oMessageModelBinding.attachChange(function (oEvent) {\n                var aContexts = oEvent.getSource().getContexts(),\n                    aMessages = [],\n                    sErrorTitle;\n\n                if (this._bMessageOpen || !aContexts.length) {\n                    return;\n                }\n\n                // Extract and remove the technical messages\n                aContexts.forEach(function (oContext) {\n                    aMessages.push(oContext.getObject());\n                });\n                oMessageManager.removeMessages(aMessages);\n\n                // Due to batching there can be more than one technical message. However the UX\n                // guidelines say \"display a single message in a message box\" assuming that there\n                // will be only one at a time.\n                sErrorTitle = aMessages.length === 1 ? sErrorText : sMultipleErrors;\n                this._showServiceError(sErrorTitle, aMessages[0].message);\n            }, this);\n        },\n\n        /**\n         * Shows a {@link sap.m.MessageBox} when a service call has failed.\n         * Only the first error message will be displayed.\n         * @param {string} sErrorTitle A title for the error message\n         * @param {string} sDetails A technical error to be displayed on request\n         * @private\n         */\n        _showServiceError : function (sErrorTitle, sDetails) {\n            this._bMessageOpen = true;\n            MessageBox.error(\n                sErrorTitle,\n                {\n                    id : \"serviceErrorMessageBox\",\n                    details: sDetails,\n                    styleClass: this._oComponent.getContentDensityClass(),\n                    actions: [MessageBox.Action.CLOSE],\n                    onClose: function () {\n                        this._bMessageOpen = false;\n                    }.bind(this)\n                }\n            );\n        }\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_NotFound.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_Object.controller.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":45,"column":35,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":45,"endColumn":44},{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":46,"column":17,"endLine":46,"endColumn":72,"severity":2,"nodeType":null}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/core/routing/History\",\n    \"../model/formatter\"\n], function (BaseController, JSONModel, History, formatter) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Object\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            // Model used to manipulate control states. The chosen values make sure,\n            // detail page shows busy indication immediately so there is no break in\n            // between the busy indication for loading the view's meta data\n            var oViewModel = new JSONModel({\n                    busy : true,\n                    delay : 0\n                });\n            this.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n            this.setModel(oViewModel, \"objectView\");\n        },\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n\n        /**\n         * Event handler  for navigating back.\n         * It there is a history entry we go one step back in the browser history\n         * If not, it will replace the current entry of the browser history with the worklist route.\n         * @public\n         */\n        onNavBack : function() {\n            var sPreviousHash = History.getInstance().getPreviousHash();\n            if (sPreviousHash !== undefined) {\n                // eslint-disable-next-line sap-no-history-manipulation\n                history.go(-1);\n            } else {\n                this.getRouter().navTo(\"worklist\", {}, true);\n            }\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n         * @private\n         */\n        _onObjectMatched : function (oEvent) {\n            var sObjectId =  oEvent.getParameter(\"arguments\").objectId;\n            this._bindView(\"/A_Plant\" + sObjectId);\n        },\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {string} sObjectPath path to the object to be bound\n         * @private\n         */\n        _bindView : function (sObjectPath) {\n            var oViewModel = this.getModel(\"objectView\");\n\n            this.getView().bindElement({\n                path: sObjectPath,\n                events: {\n                    change: this._onBindingChange.bind(this),\n                    dataRequested: function () {\n                        oViewModel.setProperty(\"/busy\", true);\n                    },\n                    dataReceived: function () {\n                        oViewModel.setProperty(\"/busy\", false);\n                    }\n                }\n            });\n        },\n\n        _onBindingChange : function () {\n            var oView = this.getView(),\n                oViewModel = this.getModel(\"objectView\"),\n                oElementBinding = oView.getElementBinding();\n\n            // No data for the binding\n            if (!oElementBinding.getBoundContext()) {\n                this.getRouter().getTargets().display(\"objectNotFound\");\n                return;\n            }\n\n            var oResourceBundle = this.getResourceBundle(),\n                oObject = oView.getBindingContext().getObject(),\n                sObjectId = oObject.Plant,\n                sObjectName = oObject.A_Plant;\n\n                oViewModel.setProperty(\"/busy\", false);\n                oViewModel.setProperty(\"/shareSendEmailSubject\",\n                    oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n                oViewModel.setProperty(\"/shareSendEmailMessage\",\n                    oResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n        }\n    });\n\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/controller_Worklist.controller.js","messages":[{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":83,"column":13,"endLine":83,"endColumn":68,"severity":2,"nodeType":null}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"../model/formatter\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (BaseController, JSONModel, formatter, Filter, FilterOperator) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Worklist\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            var oViewModel;\n\n            // keeps the search state\n            this._aTableSearchState = [];\n\n            // Model used to manipulate control states\n            oViewModel = new JSONModel({\n                worklistTableTitle : this.getResourceBundle().getText(\"worklistTableTitle\"),\n                shareSendEmailSubject: this.getResourceBundle().getText(\"shareSendEmailWorklistSubject\"),\n                shareSendEmailMessage: this.getResourceBundle().getText(\"shareSendEmailWorklistMessage\", [location.href]),\n                tableNoDataText : this.getResourceBundle().getText(\"tableNoDataText\")\n            });\n            this.setModel(oViewModel, \"worklistView\");\n\n        },\n\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n        /**\n         * Triggered by the table's 'updateFinished' event: after new table\n         * data is available, this handler method updates the table counter.\n         * This should only happen if the update was successful, which is\n         * why this handler is attached to 'updateFinished' and not to the\n         * table's list binding's 'dataReceived' method.\n         * @param {sap.ui.base.Event} oEvent the update finished event\n         * @public\n         */\n        onUpdateFinished : function (oEvent) {\n            // update the worklist's object counter after the table update\n            var sTitle,\n                oTable = oEvent.getSource(),\n                iTotalItems = oEvent.getParameter(\"total\");\n            // only update the counter if the length is final and\n            // the table is not empty\n            if (iTotalItems && oTable.getBinding(\"items\").isLengthFinal()) {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitleCount\", [iTotalItems]);\n            } else {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitle\");\n            }\n            this.getModel(\"worklistView\").setProperty(\"/worklistTableTitle\", sTitle);\n        },\n\n        /**\n         * Event handler when a table item gets pressed\n         * @param {sap.ui.base.Event} oEvent the table selectionChange event\n         * @public\n         */\n        onPress : function (oEvent) {\n            // The source is the list item that got pressed\n            this._showObject(oEvent.getSource());\n        },\n\n        /**\n         * Event handler for navigating back.\n         * Navigate back in the browser history\n         * @public\n         */\n        onNavBack : function() {\n            // eslint-disable-next-line sap-no-history-manipulation\n            history.go(-1);\n        },\n\n\n        onSearch : function (oEvent) {\n            if (oEvent.getParameters().refreshButtonPressed) {\n                // Search field's 'refresh' button has been pressed.\n                // This is visible if you select any main list item.\n                // In this case no new search is triggered, we only\n                // refresh the list binding.\n                this.onRefresh();\n            } else {\n                var aTableSearchState = [];\n                var sQuery = oEvent.getParameter(\"query\");\n\n                if (sQuery && sQuery.length > 0) {\n                    aTableSearchState = [new Filter(\"Plant\", FilterOperator.Contains, sQuery)];\n                }\n                this._applySearch(aTableSearchState);\n            }\n\n        },\n\n        /**\n         * Event handler for refresh event. Keeps filter, sort\n         * and group settings and refreshes the list binding.\n         * @public\n         */\n        onRefresh : function () {\n            var oTable = this.byId(\"table\");\n            oTable.getBinding(\"items\").refresh();\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Shows the selected item on the object page\n         * @param {sap.m.ObjectListItem} oItem selected Item\n         * @private\n         */\n        _showObject : function (oItem) {\n            this.getRouter().navTo(\"object\", {\n                objectId: oItem.getBindingContext().getPath().substring(\"/A_Plant\".length)\n            });\n        },\n\n        /**\n         * Internal helper method to apply both filter and search state together on the list binding\n         * @param {sap.ui.model.Filter[]} aTableSearchState An array of filters for the search\n         * @private\n         */\n        _applySearch: function(aTableSearchState) {\n            var oTable = this.byId(\"table\"),\n                oViewModel = this.getModel(\"worklistView\");\n            oTable.getBinding(\"items\").filter(aTableSearchState, \"Application\");\n            // changes the noDataText of the list in case there are no filter results\n            if (aTableSearchState.length !== 0) {\n                oViewModel.setProperty(\"/tableNoDataText\", this.getResourceBundle().getText(\"worklistNoDataWithSearchText\"));\n            }\n        }\n\n    });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/model_formatter.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS1/model_models.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token &","line":4,"column":3}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/Device\"\n],&nbsp;\n    /**\n     * provide app-view type models (as in the first \"V\" in MVVC)\n     *&nbsp;\n     * @param {typeof sap.ui.model.json.JSONModel} JSONModel\n     * @param {typeof sap.ui.Device} Device\n     *&nbsp;\n     * @returns {Function} createDeviceModel() for providing runtime info for the device the UI5 app is running on\n     */\n    function (JSONModel, Device) {\n        \"use strict\";\n\n        return {\n            createDeviceModel: function () {\n                var oModel = new JSONModel(Device);\n                oModel.setDefaultBindingMode(\"OneWay\");\n                return oModel;\n        }\n    };\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/Component.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":54,"column":48,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":54,"endColumn":57},{"ruleId":"sap-no-proprietary-browser-api","message":"Definition for rule 'sap-no-proprietary-browser-api' was not found.","line":56,"column":17,"endLine":56,"endColumn":75,"severity":2,"nodeType":null},{"ruleId":"no-inline-comments","severity":1,"message":"Unexpected comment inline with code.","line":59,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":59,"endColumn":102}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/core/UIComponent\",\n    \"sap/ui/Device\",\n    \"./model/models\",\n    \"./controller/ErrorHandler\"\n], function (UIComponent, Device, models, ErrorHandler) {\n    \"use strict\";\n\n    return UIComponent.extend(\"yplants.Component\", {\n\n        metadata : {\n            manifest: \"json\"\n        },\n\n        /**\n         * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n         * In this function, the device models are set and the router is initialized.\n         * @public\n         * @override\n         */\n        init : function () {\n            // call the base component's init function\n            UIComponent.prototype.init.apply(this, arguments);\n\n            // initialize the error handler with the component\n            this._oErrorHandler = new ErrorHandler(this);\n\n            // set the device model\n            this.setModel(models.createDeviceModel(), \"device\");\n\n            // create the views based on the url/hash\n            this.getRouter().initialize();\n        },\n\n        /**\n         * The component is destroyed by UI5 automatically.\n         * In this method, the ErrorHandler is destroyed.\n         * @public\n         * @override\n         */\n        destroy : function () {\n            this._oErrorHandler.destroy();\n            // call the base component's destroy function\n            UIComponent.prototype.destroy.apply(this, arguments);\n        },\n\n        /**\n         * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n         * design mode class should be set, which influences the size appearance of some controls.\n         * @public\n         * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n         */\n        getContentDensityClass : function() {\n            if (this._sContentDensityClass === undefined) {\n                // check whether FLP has already set the content density class; do nothing in this case\n                // eslint-disable-next-line sap-no-proprietary-browser-api\n                if (document.body.classList.contains(\"sapUiSizeCozy\") || document.body.classList.contains(\"sapUiSizeCompact\")) {\n                    this._sContentDensityClass = \"\";\n                } else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n                    this._sContentDensityClass = \"sapUiSizeCompact\";\n                } else {\n                    // \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n                    this._sContentDensityClass = \"sapUiSizeCozy\";\n                }\n            }\n            return this._sContentDensityClass;\n        }\n\n    });\n\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_App.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_BaseController.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_ErrorHandler.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":28,"column":69,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":28,"endColumn":78}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/base/Object\",\n    \"sap/m/MessageBox\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (UI5Object, MessageBox, Filter, FilterOperator) {\n    \"use strict\";\n\n    return UI5Object.extend(\"yplants.controller.ErrorHandler\", {\n\n        /**\n         * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n         * @class\n         * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n         * @public\n         * @alias yplants.controller.ErrorHandler\n         */\n        constructor : function (oComponent) {\n            var oMessageManager = sap.ui.getCore().getMessageManager(),\n                oMessageModel = oMessageManager.getMessageModel(),\n                oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle(),\n                sErrorText = oResourceBundle.getText(\"errorText\"),\n                sMultipleErrors = oResourceBundle.getText(\"multipleErrorsText\");\n\n            this._oComponent = oComponent;\n            this._bMessageOpen = false;\n\n            this.oMessageModelBinding = oMessageModel.bindList(\"/\", undefined,\n                [], new Filter(\"technical\", FilterOperator.EQ, true));\n\n            this.oMessageModelBinding.attachChange(function (oEvent) {\n                var aContexts = oEvent.getSource().getContexts(),\n                    aMessages = [],\n                    sErrorTitle;\n\n                if (this._bMessageOpen || !aContexts.length) {\n                    return;\n                }\n\n                // Extract and remove the technical messages\n                aContexts.forEach(function (oContext) {\n                    aMessages.push(oContext.getObject());\n                });\n                oMessageManager.removeMessages(aMessages);\n\n                // Due to batching there can be more than one technical message. However the UX\n                // guidelines say \"display a single message in a message box\" assuming that there\n                // will be only one at a time.\n                sErrorTitle = aMessages.length === 1 ? sErrorText : sMultipleErrors;\n                this._showServiceError(sErrorTitle, aMessages[0].message);\n            }, this);\n        },\n\n        /**\n         * Shows a {@link sap.m.MessageBox} when a service call has failed.\n         * Only the first error message will be displayed.\n         * @param {string} sErrorTitle A title for the error message\n         * @param {string} sDetails A technical error to be displayed on request\n         * @private\n         */\n        _showServiceError : function (sErrorTitle, sDetails) {\n            this._bMessageOpen = true;\n            MessageBox.error(\n                sErrorTitle,\n                {\n                    id : \"serviceErrorMessageBox\",\n                    details: sDetails,\n                    styleClass: this._oComponent.getContentDensityClass(),\n                    actions: [MessageBox.Action.CLOSE],\n                    onClose: function () {\n                        this._bMessageOpen = false;\n                    }.bind(this)\n                }\n            );\n        }\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_NotFound.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_Object.controller.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":45,"column":35,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":45,"endColumn":44},{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":46,"column":17,"endLine":46,"endColumn":72,"severity":2,"nodeType":null}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/core/routing/History\",\n    \"../model/formatter\"\n], function (BaseController, JSONModel, History, formatter) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Object\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            // Model used to manipulate control states. The chosen values make sure,\n            // detail page shows busy indication immediately so there is no break in\n            // between the busy indication for loading the view's meta data\n            var oViewModel = new JSONModel({\n                    busy : true,\n                    delay : 0\n                });\n            this.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n            this.setModel(oViewModel, \"objectView\");\n        },\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n\n        /**\n         * Event handler  for navigating back.\n         * It there is a history entry we go one step back in the browser history\n         * If not, it will replace the current entry of the browser history with the worklist route.\n         * @public\n         */\n        onNavBack : function() {\n            var sPreviousHash = History.getInstance().getPreviousHash();\n            if (sPreviousHash !== undefined) {\n                // eslint-disable-next-line sap-no-history-manipulation\n                history.go(-1);\n            } else {\n                this.getRouter().navTo(\"worklist\", {}, true);\n            }\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n         * @private\n         */\n        _onObjectMatched : function (oEvent) {\n            var sObjectId =  oEvent.getParameter(\"arguments\").objectId;\n            this._bindView(\"/A_Plant\" + sObjectId);\n        },\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {string} sObjectPath path to the object to be bound\n         * @private\n         */\n        _bindView : function (sObjectPath) {\n            var oViewModel = this.getModel(\"objectView\");\n\n            this.getView().bindElement({\n                path: sObjectPath,\n                events: {\n                    change: this._onBindingChange.bind(this),\n                    dataRequested: function () {\n                        oViewModel.setProperty(\"/busy\", true);\n                    },\n                    dataReceived: function () {\n                        oViewModel.setProperty(\"/busy\", false);\n                    }\n                }\n            });\n        },\n\n        _onBindingChange : function () {\n            var oView = this.getView(),\n                oViewModel = this.getModel(\"objectView\"),\n                oElementBinding = oView.getElementBinding();\n\n            // No data for the binding\n            if (!oElementBinding.getBoundContext()) {\n                this.getRouter().getTargets().display(\"objectNotFound\");\n                return;\n            }\n\n            var oResourceBundle = this.getResourceBundle(),\n                oObject = oView.getBindingContext().getObject(),\n                sObjectId = oObject.Plant,\n                sObjectName = oObject.A_Plant;\n\n                oViewModel.setProperty(\"/busy\", false);\n                oViewModel.setProperty(\"/shareSendEmailSubject\",\n                    oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n                oViewModel.setProperty(\"/shareSendEmailMessage\",\n                    oResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n        }\n    });\n\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/controller_Worklist.controller.js","messages":[{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":83,"column":13,"endLine":83,"endColumn":68,"severity":2,"nodeType":null}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"../model/formatter\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (BaseController, JSONModel, formatter, Filter, FilterOperator) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Worklist\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            var oViewModel;\n\n            // keeps the search state\n            this._aTableSearchState = [];\n\n            // Model used to manipulate control states\n            oViewModel = new JSONModel({\n                worklistTableTitle : this.getResourceBundle().getText(\"worklistTableTitle\"),\n                shareSendEmailSubject: this.getResourceBundle().getText(\"shareSendEmailWorklistSubject\"),\n                shareSendEmailMessage: this.getResourceBundle().getText(\"shareSendEmailWorklistMessage\", [location.href]),\n                tableNoDataText : this.getResourceBundle().getText(\"tableNoDataText\")\n            });\n            this.setModel(oViewModel, \"worklistView\");\n\n        },\n\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n        /**\n         * Triggered by the table's 'updateFinished' event: after new table\n         * data is available, this handler method updates the table counter.\n         * This should only happen if the update was successful, which is\n         * why this handler is attached to 'updateFinished' and not to the\n         * table's list binding's 'dataReceived' method.\n         * @param {sap.ui.base.Event} oEvent the update finished event\n         * @public\n         */\n        onUpdateFinished : function (oEvent) {\n            // update the worklist's object counter after the table update\n            var sTitle,\n                oTable = oEvent.getSource(),\n                iTotalItems = oEvent.getParameter(\"total\");\n            // only update the counter if the length is final and\n            // the table is not empty\n            if (iTotalItems && oTable.getBinding(\"items\").isLengthFinal()) {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitleCount\", [iTotalItems]);\n            } else {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitle\");\n            }\n            this.getModel(\"worklistView\").setProperty(\"/worklistTableTitle\", sTitle);\n        },\n\n        /**\n         * Event handler when a table item gets pressed\n         * @param {sap.ui.base.Event} oEvent the table selectionChange event\n         * @public\n         */\n        onPress : function (oEvent) {\n            // The source is the list item that got pressed\n            this._showObject(oEvent.getSource());\n        },\n\n        /**\n         * Event handler for navigating back.\n         * Navigate back in the browser history\n         * @public\n         */\n        onNavBack : function() {\n            // eslint-disable-next-line sap-no-history-manipulation\n            history.go(-1);\n        },\n\n\n        onSearch : function (oEvent) {\n            if (oEvent.getParameters().refreshButtonPressed) {\n                // Search field's 'refresh' button has been pressed.\n                // This is visible if you select any main list item.\n                // In this case no new search is triggered, we only\n                // refresh the list binding.\n                this.onRefresh();\n            } else {\n                var aTableSearchState = [];\n                var sQuery = oEvent.getParameter(\"query\");\n\n                if (sQuery && sQuery.length > 0) {\n                    aTableSearchState = [new Filter(\"Plant\", FilterOperator.Contains, sQuery)];\n                }\n                this._applySearch(aTableSearchState);\n            }\n\n        },\n\n        /**\n         * Event handler for refresh event. Keeps filter, sort\n         * and group settings and refreshes the list binding.\n         * @public\n         */\n        onRefresh : function () {\n            var oTable = this.byId(\"table\");\n            oTable.getBinding(\"items\").refresh();\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Shows the selected item on the object page\n         * @param {sap.m.ObjectListItem} oItem selected Item\n         * @private\n         */\n        _showObject : function (oItem) {\n            this.getRouter().navTo(\"object\", {\n                objectId: oItem.getBindingContext().getPath().substring(\"/A_Plant\".length)\n            });\n        },\n\n        /**\n         * Internal helper method to apply both filter and search state together on the list binding\n         * @param {sap.ui.model.Filter[]} aTableSearchState An array of filters for the search\n         * @private\n         */\n        _applySearch: function(aTableSearchState) {\n            var oTable = this.byId(\"table\"),\n                oViewModel = this.getModel(\"worklistView\");\n            oTable.getBinding(\"items\").filter(aTableSearchState, \"Application\");\n            // changes the noDataText of the list in case there are no filter results\n            if (aTableSearchState.length !== 0) {\n                oViewModel.setProperty(\"/tableNoDataText\", this.getResourceBundle().getText(\"worklistNoDataWithSearchText\"));\n            }\n        }\n\n    });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/model_formatter.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTSB/model_models.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token &","line":4,"column":3}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/Device\"\n],&nbsp;\n    /**\n     * provide app-view type models (as in the first \"V\" in MVVC)\n     *&nbsp;\n     * @param {typeof sap.ui.model.json.JSONModel} JSONModel\n     * @param {typeof sap.ui.Device} Device\n     *&nbsp;\n     * @returns {Function} createDeviceModel() for providing runtime info for the device the UI5 app is running on\n     */\n    function (JSONModel, Device) {\n        \"use strict\";\n\n        return {\n            createDeviceModel: function () {\n                var oModel = new JSONModel(Device);\n                oModel.setDefaultBindingMode(\"OneWay\");\n                return oModel;\n        }\n    };\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/Component.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":54,"column":48,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":54,"endColumn":57},{"ruleId":"sap-no-proprietary-browser-api","message":"Definition for rule 'sap-no-proprietary-browser-api' was not found.","line":56,"column":17,"endLine":56,"endColumn":75,"severity":2,"nodeType":null},{"ruleId":"no-inline-comments","severity":1,"message":"Unexpected comment inline with code.","line":59,"column":53,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":59,"endColumn":102}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/core/UIComponent\",\n    \"sap/ui/Device\",\n    \"./model/models\",\n    \"./controller/ErrorHandler\"\n], function (UIComponent, Device, models, ErrorHandler) {\n    \"use strict\";\n\n    return UIComponent.extend(\"yplants.Component\", {\n\n        metadata : {\n            manifest: \"json\"\n        },\n\n        /**\n         * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n         * In this function, the device models are set and the router is initialized.\n         * @public\n         * @override\n         */\n        init : function () {\n            // call the base component's init function\n            UIComponent.prototype.init.apply(this, arguments);\n\n            // initialize the error handler with the component\n            this._oErrorHandler = new ErrorHandler(this);\n\n            // set the device model\n            this.setModel(models.createDeviceModel(), \"device\");\n\n            // create the views based on the url/hash\n            this.getRouter().initialize();\n        },\n\n        /**\n         * The component is destroyed by UI5 automatically.\n         * In this method, the ErrorHandler is destroyed.\n         * @public\n         * @override\n         */\n        destroy : function () {\n            this._oErrorHandler.destroy();\n            // call the base component's destroy function\n            UIComponent.prototype.destroy.apply(this, arguments);\n        },\n\n        /**\n         * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n         * design mode class should be set, which influences the size appearance of some controls.\n         * @public\n         * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n         */\n        getContentDensityClass : function() {\n            if (this._sContentDensityClass === undefined) {\n                // check whether FLP has already set the content density class; do nothing in this case\n                // eslint-disable-next-line sap-no-proprietary-browser-api\n                if (document.body.classList.contains(\"sapUiSizeCozy\") || document.body.classList.contains(\"sapUiSizeCompact\")) {\n                    this._sContentDensityClass = \"\";\n                } else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n                    this._sContentDensityClass = \"sapUiSizeCompact\";\n                } else {\n                    // \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n                    this._sContentDensityClass = \"sapUiSizeCozy\";\n                }\n            }\n            return this._sContentDensityClass;\n        }\n\n    });\n\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_App.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_BaseController.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_ErrorHandler.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":28,"column":69,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":28,"endColumn":78}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/base/Object\",\n    \"sap/m/MessageBox\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (UI5Object, MessageBox, Filter, FilterOperator) {\n    \"use strict\";\n\n    return UI5Object.extend(\"yplants.controller.ErrorHandler\", {\n\n        /**\n         * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n         * @class\n         * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n         * @public\n         * @alias yplants.controller.ErrorHandler\n         */\n        constructor : function (oComponent) {\n            var oMessageManager = sap.ui.getCore().getMessageManager(),\n                oMessageModel = oMessageManager.getMessageModel(),\n                oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle(),\n                sErrorText = oResourceBundle.getText(\"errorText\"),\n                sMultipleErrors = oResourceBundle.getText(\"multipleErrorsText\");\n\n            this._oComponent = oComponent;\n            this._bMessageOpen = false;\n\n            this.oMessageModelBinding = oMessageModel.bindList(\"/\", undefined,\n                [], new Filter(\"technical\", FilterOperator.EQ, true));\n\n            this.oMessageModelBinding.attachChange(function (oEvent) {\n                var aContexts = oEvent.getSource().getContexts(),\n                    aMessages = [],\n                    sErrorTitle;\n\n                if (this._bMessageOpen || !aContexts.length) {\n                    return;\n                }\n\n                // Extract and remove the technical messages\n                aContexts.forEach(function (oContext) {\n                    aMessages.push(oContext.getObject());\n                });\n                oMessageManager.removeMessages(aMessages);\n\n                // Due to batching there can be more than one technical message. However the UX\n                // guidelines say \"display a single message in a message box\" assuming that there\n                // will be only one at a time.\n                sErrorTitle = aMessages.length === 1 ? sErrorText : sMultipleErrors;\n                this._showServiceError(sErrorTitle, aMessages[0].message);\n            }, this);\n        },\n\n        /**\n         * Shows a {@link sap.m.MessageBox} when a service call has failed.\n         * Only the first error message will be displayed.\n         * @param {string} sErrorTitle A title for the error message\n         * @param {string} sDetails A technical error to be displayed on request\n         * @private\n         */\n        _showServiceError : function (sErrorTitle, sDetails) {\n            this._bMessageOpen = true;\n            MessageBox.error(\n                sErrorTitle,\n                {\n                    id : \"serviceErrorMessageBox\",\n                    details: sDetails,\n                    styleClass: this._oComponent.getContentDensityClass(),\n                    actions: [MessageBox.Action.CLOSE],\n                    onClose: function () {\n                        this._bMessageOpen = false;\n                    }.bind(this)\n                }\n            );\n        }\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_NotFound.controller.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_Object.controller.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":45,"column":35,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":45,"endColumn":44},{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":46,"column":17,"endLine":46,"endColumn":72,"severity":2,"nodeType":null}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/core/routing/History\",\n    \"../model/formatter\"\n], function (BaseController, JSONModel, History, formatter) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Object\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            // Model used to manipulate control states. The chosen values make sure,\n            // detail page shows busy indication immediately so there is no break in\n            // between the busy indication for loading the view's meta data\n            var oViewModel = new JSONModel({\n                    busy : true,\n                    delay : 0\n                });\n            this.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n            this.setModel(oViewModel, \"objectView\");\n        },\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n\n        /**\n         * Event handler  for navigating back.\n         * It there is a history entry we go one step back in the browser history\n         * If not, it will replace the current entry of the browser history with the worklist route.\n         * @public\n         */\n        onNavBack : function() {\n            var sPreviousHash = History.getInstance().getPreviousHash();\n            if (sPreviousHash !== undefined) {\n                // eslint-disable-next-line sap-no-history-manipulation\n                history.go(-1);\n            } else {\n                this.getRouter().navTo(\"worklist\", {}, true);\n            }\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n         * @private\n         */\n        _onObjectMatched : function (oEvent) {\n            var sObjectId =  oEvent.getParameter(\"arguments\").objectId;\n            this._bindView(\"/A_Plant\" + sObjectId);\n        },\n\n        /**\n         * Binds the view to the object path.\n         * @function\n         * @param {string} sObjectPath path to the object to be bound\n         * @private\n         */\n        _bindView : function (sObjectPath) {\n            var oViewModel = this.getModel(\"objectView\");\n\n            this.getView().bindElement({\n                path: sObjectPath,\n                events: {\n                    change: this._onBindingChange.bind(this),\n                    dataRequested: function () {\n                        oViewModel.setProperty(\"/busy\", true);\n                    },\n                    dataReceived: function () {\n                        oViewModel.setProperty(\"/busy\", false);\n                    }\n                }\n            });\n        },\n\n        _onBindingChange : function () {\n            var oView = this.getView(),\n                oViewModel = this.getModel(\"objectView\"),\n                oElementBinding = oView.getElementBinding();\n\n            // No data for the binding\n            if (!oElementBinding.getBoundContext()) {\n                this.getRouter().getTargets().display(\"objectNotFound\");\n                return;\n            }\n\n            var oResourceBundle = this.getResourceBundle(),\n                oObject = oView.getBindingContext().getObject(),\n                sObjectId = oObject.Plant,\n                sObjectName = oObject.A_Plant;\n\n                oViewModel.setProperty(\"/busy\", false);\n                oViewModel.setProperty(\"/shareSendEmailSubject\",\n                    oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n                oViewModel.setProperty(\"/shareSendEmailMessage\",\n                    oResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n        }\n    });\n\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/controller_Worklist.controller.js","messages":[{"ruleId":"sap-no-history-manipulation","message":"Definition for rule 'sap-no-history-manipulation' was not found.","line":83,"column":13,"endLine":83,"endColumn":68,"severity":2,"nodeType":null}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"./BaseController\",\n    \"sap/ui/model/json/JSONModel\",\n    \"../model/formatter\",\n    \"sap/ui/model/Filter\",\n    \"sap/ui/model/FilterOperator\"\n], function (BaseController, JSONModel, formatter, Filter, FilterOperator) {\n    \"use strict\";\n\n    return BaseController.extend(\"yplants.controller.Worklist\", {\n\n        formatter: formatter,\n\n        /* =========================================================== */\n        /* lifecycle methods                                           */\n        /* =========================================================== */\n\n        /**\n         * Called when the worklist controller is instantiated.\n         * @public\n         */\n        onInit : function () {\n            var oViewModel;\n\n            // keeps the search state\n            this._aTableSearchState = [];\n\n            // Model used to manipulate control states\n            oViewModel = new JSONModel({\n                worklistTableTitle : this.getResourceBundle().getText(\"worklistTableTitle\"),\n                shareSendEmailSubject: this.getResourceBundle().getText(\"shareSendEmailWorklistSubject\"),\n                shareSendEmailMessage: this.getResourceBundle().getText(\"shareSendEmailWorklistMessage\", [location.href]),\n                tableNoDataText : this.getResourceBundle().getText(\"tableNoDataText\")\n            });\n            this.setModel(oViewModel, \"worklistView\");\n\n        },\n\n        /* =========================================================== */\n        /* event handlers                                              */\n        /* =========================================================== */\n\n        /**\n         * Triggered by the table's 'updateFinished' event: after new table\n         * data is available, this handler method updates the table counter.\n         * This should only happen if the update was successful, which is\n         * why this handler is attached to 'updateFinished' and not to the\n         * table's list binding's 'dataReceived' method.\n         * @param {sap.ui.base.Event} oEvent the update finished event\n         * @public\n         */\n        onUpdateFinished : function (oEvent) {\n            // update the worklist's object counter after the table update\n            var sTitle,\n                oTable = oEvent.getSource(),\n                iTotalItems = oEvent.getParameter(\"total\");\n            // only update the counter if the length is final and\n            // the table is not empty\n            if (iTotalItems && oTable.getBinding(\"items\").isLengthFinal()) {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitleCount\", [iTotalItems]);\n            } else {\n                sTitle = this.getResourceBundle().getText(\"worklistTableTitle\");\n            }\n            this.getModel(\"worklistView\").setProperty(\"/worklistTableTitle\", sTitle);\n        },\n\n        /**\n         * Event handler when a table item gets pressed\n         * @param {sap.ui.base.Event} oEvent the table selectionChange event\n         * @public\n         */\n        onPress : function (oEvent) {\n            // The source is the list item that got pressed\n            this._showObject(oEvent.getSource());\n        },\n\n        /**\n         * Event handler for navigating back.\n         * Navigate back in the browser history\n         * @public\n         */\n        onNavBack : function() {\n            // eslint-disable-next-line sap-no-history-manipulation\n            history.go(-1);\n        },\n\n\n        onSearch : function (oEvent) {\n            if (oEvent.getParameters().refreshButtonPressed) {\n                // Search field's 'refresh' button has been pressed.\n                // This is visible if you select any main list item.\n                // In this case no new search is triggered, we only\n                // refresh the list binding.\n                this.onRefresh();\n            } else {\n                var aTableSearchState = [];\n                var sQuery = oEvent.getParameter(\"query\");\n\n                if (sQuery && sQuery.length > 0) {\n                    aTableSearchState = [new Filter(\"Plant\", FilterOperator.Contains, sQuery)];\n                }\n                this._applySearch(aTableSearchState);\n            }\n\n        },\n\n        /**\n         * Event handler for refresh event. Keeps filter, sort\n         * and group settings and refreshes the list binding.\n         * @public\n         */\n        onRefresh : function () {\n            var oTable = this.byId(\"table\");\n            oTable.getBinding(\"items\").refresh();\n        },\n\n        /* =========================================================== */\n        /* internal methods                                            */\n        /* =========================================================== */\n\n        /**\n         * Shows the selected item on the object page\n         * @param {sap.m.ObjectListItem} oItem selected Item\n         * @private\n         */\n        _showObject : function (oItem) {\n            this.getRouter().navTo(\"object\", {\n                objectId: oItem.getBindingContext().getPath().substring(\"/A_Plant\".length)\n            });\n        },\n\n        /**\n         * Internal helper method to apply both filter and search state together on the list binding\n         * @param {sap.ui.model.Filter[]} aTableSearchState An array of filters for the search\n         * @private\n         */\n        _applySearch: function(aTableSearchState) {\n            var oTable = this.byId(\"table\"),\n                oViewModel = this.getModel(\"worklistView\");\n            oTable.getBinding(\"items\").filter(aTableSearchState, \"Application\");\n            // changes the noDataText of the list in case there are no filter results\n            if (aTableSearchState.length !== 0) {\n                oViewModel.setProperty(\"/tableNoDataText\", this.getResourceBundle().getText(\"worklistNoDataWithSearchText\"));\n            }\n        }\n\n    });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/model_formatter.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/YPLANTS_1/model_models.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token &","line":4,"column":3}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/Device\"\n],&nbsp;\n    /**\n     * provide app-view type models (as in the first \"V\" in MVVC)\n     *&nbsp;\n     * @param {typeof sap.ui.model.json.JSONModel} JSONModel\n     * @param {typeof sap.ui.Device} Device\n     *&nbsp;\n     * @returns {Function} createDeviceModel() for providing runtime info for the device the UI5 app is running on\n     */\n    function (JSONModel, Device) {\n        \"use strict\";\n\n        return {\n            createDeviceModel: function () {\n                var oModel = new JSONModel(Device);\n                oModel.setDefaultBindingMode(\"OneWay\");\n                return oModel;\n        }\n    };\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/Y_TP_BOPF_DEMO9/Component.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/ZORDERS00/Component.js","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/ZORDERS00/ext_controller_MainController.controller.js","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":6,"column":17,"nodeType":"CallExpression","messageId":"unexpected","endLine":6,"endColumn":44},{"ruleId":"no-constant-condition","severity":1,"message":"Unexpected constant condition.","line":7,"column":21,"nodeType":"Literal","messageId":"unexpected","endLine":7,"endColumn":25}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([], function(ControllerExtension, Icon) {\n    \"use strict\";\n    return ControllerExtension.extend(\"com.pg.btp.zorders00.ext.controller.MainController\", {\n        override:{\n            onInit: function(){\n                alert('I am eslint error!');\n                if (true) {\n                    console.log('Me');\n                }\n            }\n        }\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/ZORDERS00/ext_controller_SomeModule.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":6,"column":21,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":6,"endColumn":30},{"ruleId":"no-inline-comments","severity":1,"message":"Unexpected comment inline with code.","line":6,"column":39,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":6,"endColumn":60},{"ruleId":"@procter-gamble/sapui5-coding-standards/pg-no-jquery-sap","severity":2,"message":"Unexpected reference to legacy jQuery.sap API","line":7,"column":29,"nodeType":"MemberExpression","messageId":"unexpectedUse","endLine":7,"endColumn":39}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([], function(ControllerExtension, Icon) {\n    \"use strict\";\n    return ControllerExtension.extend(\"com.pg.btp.zorders00.ext.utils.SomeModule\", {\n        override:{\n            onInit: function(){\n                var undefined = \"hi\"; //I am inline comment\n                var sPath = jQuery.sap.getModulePath(\"com.pg.btp.zorders.Component\");\n            }\n        }\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/user/projects/fiori-analyzer/srv/analyze-container/ZVALUEHELPXX/Component.js","messages":[{"ruleId":"no-inline-comments","severity":1,"message":"Unexpected comment inline with code.","line":7,"column":25,"nodeType":"Line","messageId":"unexpectedInlineComment","endLine":7,"endColumn":53}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define(\n    [\"sap/suite/ui/generic/template/lib/AppComponent\"],\n    function (Component) {\n        \"use strict\";\n\n        return Component.extend(\"com.pg.btp.zvaluehelpxx.Component\", {\n            metadata: { // Inline comment here&nbsp;\n                manifest: \"json\"\n            }\n        });\n    }\n);\n","usedDeprecatedRules":[]}]